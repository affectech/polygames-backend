services:
  postgresql:
    container_name: polygames-postgresql
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - ./database/.pg_data:/var/lib/postgres/data
      - ./database/fake.sql:/docker-entrypoint-initdb.d/fake.sql

    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    networks:
      - net
    healthcheck:
      test:
        ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}'"]
      interval: 10s
      timeout: 0s
      retries: 2

  server:
    container_name: polygames-server
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_DIR=$APP_DIR
        - APP_NAME=$APP_NAME
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    env_file:
      - .env
    ports:
      - 8080:8080
    environment:
      - ENV=${APP_ENV:-prod}
    networks:
      - net
    volumes:
      - ./:/opt/polygames
    depends_on:
      postgresql:
        condition: service_healthy

  migrations:
    container_name: polygames-migrations
    image: migrate/migrate
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - net
    command: -database postgres://${DB_USERNAME}:${DB_PASSWORD}@postgresql:${DB_PORT}/${DB_DATABASE}?sslmode=disable -path /opt/polygames/migrations up
    volumes:
      - ./database/migrations:/opt/polygames/migrations

networks:
  net:
